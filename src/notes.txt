Index: 1
1.1: 
This interface defines what the context value will look like when used with React’s Context API for managing users.

1.2: 
user: User[] | null
This represents the state of users in the app.
User[] → An array of user objects (each conforming to the User interface).
| null → It could also be null (maybe initially, or if no user data is loaded yet).

1.3: 
addUser: (user: User) => void
This is a function that accepts/add a single user object (of type User) and adds it to the list.
=> void → Means the function does not return anything.

1.4: 
updateUser: (id: string, updatedFields: Partial<User>) => void
A function that takes an id and an object that can contain some or all of the fields from the User type.
Purpose: It will update a user’s details based on their ID.
The keyword Partial<T> is a TypeScript utility type that transforms all properties of the given type T into optional properties.



1.5: 
deleteUser: (id: string) => void
A function to remove a user from the user list.
Takes an id (string), and removes the user with that id.


//====================== What this "?" stands for
{
  id?: string;
  name?: string;
  age?: number;
  isMarried?: boolean;
  gender?: string;
  profession?: string;
  hobbies?: string[];
}

This is a type definition for an object where each property may or may not be present (because of the "?")


//====================== "type" vs "interface" Keyword
Both "type" and "interface" are used to define the shape of data.
type: Limited to object-like structures	
interface: Can represent functions, primitives, unions, tuples, etc.